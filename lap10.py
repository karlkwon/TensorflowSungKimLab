{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "https://github.com/aymericdamien/TensorFlow-Examples<br>\n",
    ": \n",
    "\n",
    "http://hunkim.github.io/ml/<br>\n",
    "\n",
    "\n",
    "wget https://gist.githubusercontent.com/haje01/14b0e5d8bd5428df781e/raw/5b6d04c55f30191a0e32d0ae627716413c808c1c/input_data.py<br>\n",
    "이것도 동작 안한다...?<br>\n",
    "\n",
    "http://yann.lecun.com/exdb/mnist/<br>\n",
    "에서 하나하나 다운 받음.<br>\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "from __future__ import print_function\n",
    "from builtins import range\n",
    "import input_data\n",
    "import tensorflow as tf\n",
    "\n",
    "mnist = input_data.read_data_sets(\"/data/mnist\", one_hot=True)\n",
    "\n",
    "learning_rate = 0.001\n",
    "batch_size = 128\n",
    "display_step = 10\n",
    "\n",
    "training_epochs = 100\n",
    "\n",
    "n_input = 784\n",
    "n_classes = 10\n",
    "# dropout = 0.75\n",
    "\n",
    "x = tf.placeholder(tf.float32, [None, n_input])\n",
    "y = tf.placeholder(tf.float32, [None, n_classes])\n",
    "keep_prob = tf.placeholder(tf.float32)\n",
    "\n",
    "W = tf.Variable(tf.zeros([784, 10]))\n",
    "b = tf.Variable(tf.zeros([10]))\n",
    "\n",
    "activation = tf.nn.softmax(tf.matmul(x, W) + b)\n",
    "\n",
    "cost = tf.reduce_mean(-tf.reduce_sum(y*tf.log(activation), reduction_indices=1))\n",
    "optimizer = tf.train.GradientDescentOptimizer(learning_rate).minimize(cost)\n",
    "\n",
    "init = tf.initialize_all_variables()\n",
    "\n",
    "with tf.Session() as sess:\n",
    "    sess.run(init)\n",
    "\n",
    "    costs = []\n",
    "    for epoch in range(training_epochs):\n",
    "        avg_cost = 0.\n",
    "        total_batch = int(mnist.train.num_examples/batch_size)\n",
    "\n",
    "        for i in range(total_batch):\n",
    "            batch_xs, batch_ys = mnist.train.next_batch(batch_size)\n",
    "            sess.run(optimizer, feed_dict={x: batch_xs, y:batch_ys})\n",
    "            avg_cost += sess.run(cost, feed_dict={x:batch_xs, y:batch_ys})/total_batch\n",
    "\n",
    "        costs.append(avg_cost)\n",
    "        if epoch % display_step == 0:\n",
    "            print(\"Epoch: \", '%04d' % (epoch+1), \"cost= \", \"{:.9f}\".format(avg_cost))\n",
    "\n",
    "    print(\"Optimization Finished !\")\n",
    "\n",
    "    # Test model\n",
    "    correct_prediction = tf.equal(tf.argmax(activation, 1), tf.argmax(y, 1))\n",
    "    \n",
    "    #Calculate accuracy\n",
    "    accuracy = tf.reduce_mean(tf.cast(correct_prediction, \"float\"))\n",
    "    print(\"Accuracy:\", accuracy.eval({x: mnist.test.images, y: mnist.test.labels}))\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "from __future__ import print_function\n",
    "from builtins import range\n",
    "import input_data\n",
    "import tensorflow as tf\n",
    "\n",
    "mnist = input_data.read_data_sets(\"./data/mnist\", one_hot=True)\n",
    "\n",
    "learning_rate = 0.001\n",
    "batch_size = 128\n",
    "display_step = 10\n",
    "\n",
    "training_epochs = 100\n",
    "\n",
    "n_input = 784\n",
    "n_classes = 10\n",
    "# dropout = 0.75\n",
    "\n",
    "x = tf.placeholder(tf.float32, [None, n_input])\n",
    "y = tf.placeholder(tf.float32, [None, n_classes])\n",
    "keep_prob = tf.placeholder(tf.float32)\n",
    "\n",
    "W1 = tf.Variable(tf.zeros([784, 10]))\n",
    "b = tf.Variable(tf.zeros([10]))\n",
    "\n",
    "tf.histogram_summary(\"weights_1\", W)\n",
    "tf.histogram_summary(\"biases_1\", b)\n",
    "tf.histogram_summary(\"y\", y)\n",
    "\n",
    "with tf.name_scope(\"layer-1\") as scope:\n",
    "    activation = tf.nn.softmax(tf.matmul(x, W) + b)\n",
    "\n",
    "with tf.name_scope(\"cost\") as scope:\n",
    "    cost = tf.reduce_mean(-tf.reduce_sum(y*tf.log(activation), reduction_indices=1))\n",
    "    cost_summ = tf.scalar_summary(\"cost\", cost)\n",
    "\n",
    "with tf.name_scope(\"train\") as scope:\n",
    "    optimizer = tf.train.GradientDescentOptimizer(learning_rate).minimize(cost)\n",
    "\n",
    "init = tf.initialize_all_variables()\n",
    "step = 0\n",
    "\n",
    "with tf.Session() as sess:\n",
    "    sess.run(init)\n",
    "\n",
    "    merged = tf.merge_all_summaries()\n",
    "    writer = tf.train.SummaryWriter(\"./logs/mnist_logs\", sess.graph_def)\n",
    "\n",
    "    costs = []\n",
    "    for epoch in range(training_epochs):\n",
    "        avg_cost = 0.\n",
    "        total_batch = int(mnist.train.num_examples/batch_size)\n",
    "\n",
    "        for i in range(total_batch):\n",
    "            batch_xs, batch_ys = mnist.train.next_batch(batch_size)\n",
    "            sess.run(optimizer, feed_dict={x: batch_xs, y:batch_ys})\n",
    "            avg_cost += sess.run(cost, feed_dict={x:batch_xs, y:batch_ys})/total_batch\n",
    "\n",
    "            step += 1\n",
    "            if step % 100 == 0:\n",
    "                summary = sess.run(merged, feed_dict={x:batch_xs, y:batch_ys})\n",
    "                writer.add_summary(summary, step)\n",
    "\n",
    "\n",
    "        costs.append(avg_cost)\n",
    "        if epoch % display_step == 0:\n",
    "            print(\"Epoch: \", '%04d' % (epoch+1), \"cost= \", \"{:.9f}\".format(avg_cost))\n",
    "\n",
    "\n",
    "    print(\"Optimization Finished !\")\n",
    "\n",
    "    # Test model\n",
    "    correct_prediction = tf.equal(tf.argmax(activation, 1), tf.argmax(y, 1))\n",
    "\n",
    "    #Calculate accuracy\n",
    "    accuracy = tf.reduce_mean(tf.cast(correct_prediction, \"float\"))\n",
    "    print(\"Accuracy:\", accuracy.eval({x: mnist.test.images, y: mnist.test.labels}))\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## ch10_3.py"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "from __future__ import print_function\n",
    "from builtins import range\n",
    "import input_data\n",
    "import tensorflow as tf\n",
    "\n",
    "mnist = input_data.read_data_sets(\"./data/mnist\", one_hot=True)\n",
    "\n",
    "learning_rate = 0.001\n",
    "batch_size = 100\n",
    "display_step = 1\n",
    "\n",
    "training_epochs = 15\n",
    "\n",
    "n_input = 784\n",
    "n_classes = 10\n",
    "# dropout = 0.75\n",
    "\n",
    "x = tf.placeholder(tf.float32, [None, n_input])\n",
    "y = tf.placeholder(tf.float32, [None, n_classes])\n",
    "keep_prob = tf.placeholder(tf.float32)\n",
    "\n",
    "W1 = tf.Variable(tf.random_normal([784, 256]))\n",
    "W2 = tf.Variable(tf.random_normal([256, 256]))\n",
    "W3 = tf.Variable(tf.random_normal([256, 10]))\n",
    "B1 = tf.Variable(tf.random_normal([256]))\n",
    "B2 = tf.Variable(tf.random_normal([256]))\n",
    "B3 = tf.Variable(tf.random_normal([10]))\n",
    "\n",
    "tf.histogram_summary(\"weights_1\", W1)\n",
    "tf.histogram_summary(\"weights_2\", W2)\n",
    "tf.histogram_summary(\"weights_3\", W3)\n",
    "\n",
    "tf.histogram_summary(\"biases_1\", B1)\n",
    "tf.histogram_summary(\"biases_2\", B2)\n",
    "tf.histogram_summary(\"biases_3\", B3)\n",
    "\n",
    "tf.histogram_summary(\"y\", y)\n",
    "\n",
    "with tf.name_scope(\"layer-1\") as scope:\n",
    "    L1 = tf.nn.relu(tf.add(tf.matmul(x, W1), B1))\n",
    "\n",
    "with tf.name_scope(\"layer-2\") as scope:\n",
    "    L2 = tf.nn.relu(tf.add(tf.matmul(L1, W2), B2))\n",
    "\n",
    "with tf.name_scope(\"layer-3\") as scope:\n",
    "    hypothesis = tf.add(tf.matmul(L2, W3), B3)\n",
    "\n",
    "with tf.name_scope(\"cost\") as scope:\n",
    "    cost = tf.reduce_mean(tf.nn.softmax_cross_entropy_with_logits(hypothesis, y))\n",
    "    cost_summ = tf.scalar_summary(\"cost\", cost)\n",
    "\n",
    "with tf.name_scope(\"train\") as scope:\n",
    "    optimizer = tf.train.AdamOptimizer(learning_rate=learning_rate).minimize(cost)\n",
    "\n",
    "init = tf.initialize_all_variables()\n",
    "step = 0\n",
    "\n",
    "with tf.Session() as sess:\n",
    "    sess.run(init)\n",
    "\n",
    "    merged = tf.merge_all_summaries()\n",
    "    writer = tf.train.SummaryWriter(\"./logs/mnist_logs\", sess.graph_def)\n",
    "\n",
    "    costs = []\n",
    "    for epoch in range(training_epochs):\n",
    "        avg_cost = 0.\n",
    "        total_batch = int(mnist.train.num_examples/batch_size)\n",
    "\n",
    "        for i in range(total_batch):\n",
    "            batch_xs, batch_ys = mnist.train.next_batch(batch_size)\n",
    "            sess.run(optimizer, feed_dict={x: batch_xs, y:batch_ys})\n",
    "            avg_cost += sess.run(cost, feed_dict={x:batch_xs, y:batch_ys})/total_batch\n",
    "\n",
    "            step += 1\n",
    "            if step % 100 == 0:\n",
    "                summary = sess.run(merged, feed_dict={x:batch_xs, y:batch_ys})\n",
    "                writer.add_summary(summary, step)\n",
    "\n",
    "\n",
    "        costs.append(avg_cost)\n",
    "        if epoch % display_step == 0:\n",
    "            print(\"Epoch: \", '%04d' % (epoch+1), \"cost= \", \"{:.9f}\".format(avg_cost))\n",
    "\n",
    "\n",
    "    print(\"Optimization Finished !\")\n",
    "\n",
    "    # Test model\n",
    "    correct_prediction = tf.equal(tf.argmax(hypothesis, 1), tf.argmax(y, 1))\n",
    "\n",
    "    #Calculate accuracy\n",
    "    accuracy = tf.reduce_mean(tf.cast(correct_prediction, \"float\"))\n",
    "    print(\"Accuracy:\", accuracy.eval({x: mnist.test.images, y: mnist.test.labels}))\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## ch10_4.py"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "# http://stackoverflow.com/questions/33640581/how-to-do-xavier-initialization-on-tensorflow\n",
    "# xavier initializer\n",
    "\n",
    "from __future__ import print_function\n",
    "from builtins import range\n",
    "import input_data\n",
    "import tensorflow as tf\n",
    "\n",
    "mnist = input_data.read_data_sets(\"./data/mnist\", one_hot=True)\n",
    "\n",
    "learning_rate = 0.001\n",
    "batch_size = 100\n",
    "display_step = 1\n",
    "\n",
    "training_epochs = 15\n",
    "\n",
    "n_input = 784\n",
    "n_classes = 10\n",
    "# dropout = 0.75\n",
    "\n",
    "x = tf.placeholder(tf.float32, [None, n_input])\n",
    "y = tf.placeholder(tf.float32, [None, n_classes])\n",
    "keep_prob = tf.placeholder(tf.float32)\n",
    "\n",
    "\n",
    "W1= tf.get_variable(\"W1\", shape=[784, 256], initializer=tf.contrib.layers.xavier_initializer())\n",
    "W2= tf.get_variable(\"W2\", shape=[256, 256], initializer=tf.contrib.layers.xavier_initializer())\n",
    "W3= tf.get_variable(\"W3\", shape=[256, 10], initializer=tf.contrib.layers.xavier_initializer())\n",
    "\n",
    "B1 = tf.Variable(tf.random_normal([256]))\n",
    "B2 = tf.Variable(tf.random_normal([256]))\n",
    "B3 = tf.Variable(tf.random_normal([10]))\n",
    "\n",
    "tf.histogram_summary(\"weights_1\", W1)\n",
    "tf.histogram_summary(\"weights_2\", W2)\n",
    "tf.histogram_summary(\"weights_3\", W3)\n",
    "\n",
    "tf.histogram_summary(\"biases_1\", B1)\n",
    "tf.histogram_summary(\"biases_2\", B2)\n",
    "tf.histogram_summary(\"biases_3\", B3)\n",
    "\n",
    "tf.histogram_summary(\"y\", y)\n",
    "\n",
    "with tf.name_scope(\"layer-1\") as scope:\n",
    "    L1 = tf.nn.relu(tf.add(tf.matmul(x, W1), B1))\n",
    "\n",
    "with tf.name_scope(\"layer-2\") as scope:\n",
    "    L2 = tf.nn.relu(tf.add(tf.matmul(L1, W2), B2))\n",
    "\n",
    "with tf.name_scope(\"layer-3\") as scope:\n",
    "    hypothesis = tf.add(tf.matmul(L2, W3), B3)\n",
    "\n",
    "with tf.name_scope(\"cost\") as scope:\n",
    "    cost = tf.reduce_mean(tf.nn.softmax_cross_entropy_with_logits(hypothesis, y))\n",
    "    cost_summ = tf.scalar_summary(\"cost\", cost)\n",
    "\n",
    "with tf.name_scope(\"train\") as scope:\n",
    "    optimizer = tf.train.AdamOptimizer(learning_rate=learning_rate).minimize(cost)\n",
    "\n",
    "init = tf.initialize_all_variables()\n",
    "step = 0\n",
    "\n",
    "with tf.Session() as sess:\n",
    "    sess.run(init)\n",
    "\n",
    "    merged = tf.merge_all_summaries()\n",
    "    writer = tf.train.SummaryWriter(\"./logs/mnist_logs\", sess.graph_def)\n",
    "\n",
    "    costs = []\n",
    "    for epoch in range(training_epochs):\n",
    "        avg_cost = 0.\n",
    "        total_batch = int(mnist.train.num_examples/batch_size)\n",
    "\n",
    "        for i in range(total_batch):\n",
    "            batch_xs, batch_ys = mnist.train.next_batch(batch_size)\n",
    "            sess.run(optimizer, feed_dict={x: batch_xs, y:batch_ys})\n",
    "            avg_cost += sess.run(cost, feed_dict={x:batch_xs, y:batch_ys})/total_batch\n",
    "\n",
    "            step += 1\n",
    "            if step % 100 == 0:\n",
    "                summary = sess.run(merged, feed_dict={x:batch_xs, y:batch_ys})\n",
    "                writer.add_summary(summary, step)\n",
    "\n",
    "\n",
    "        costs.append(avg_cost)\n",
    "        if epoch % display_step == 0:\n",
    "            print(\"Epoch: \", '%04d' % (epoch+1), \"cost= \", \"{:.9f}\".format(avg_cost))\n",
    "\n",
    "\n",
    "    print(\"Optimization Finished !\")\n",
    "\n",
    "    # Test model\n",
    "    correct_prediction = tf.equal(tf.argmax(hypothesis, 1), tf.argmax(y, 1))\n",
    "\n",
    "    #Calculate accuracy\n",
    "    accuracy = tf.reduce_mean(tf.cast(correct_prediction, \"float\"))\n",
    "    print(\"Accuracy:\", accuracy.eval({x: mnist.test.images, y: mnist.test.labels}))\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## ch10_5.py"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "# http://stackoverflow.com/questions/33640581/how-to-do-xavier-initialization-on-tensorflow\n",
    "# xavier initializer\n",
    "# dropout\n",
    "\n",
    "from __future__ import print_function\n",
    "from builtins import range\n",
    "import input_data\n",
    "import tensorflow as tf\n",
    "\n",
    "mnist = input_data.read_data_sets(\"./data/mnist\", one_hot=True)\n",
    "\n",
    "learning_rate = 0.001\n",
    "batch_size = 100\n",
    "display_step = 1\n",
    "\n",
    "training_epochs = 15\n",
    "\n",
    "n_input = 784\n",
    "n_classes = 10\n",
    "# dropout = 0.75\n",
    "\n",
    "x = tf.placeholder(tf.float32, [None, n_input])\n",
    "y = tf.placeholder(tf.float32, [None, n_classes])\n",
    "keep_prob = tf.placeholder(tf.float32)\n",
    "\n",
    "\n",
    "W1= tf.get_variable(\"W1\", shape=[784, 256], initializer=tf.contrib.layers.xavier_initializer())\n",
    "W2= tf.get_variable(\"W2\", shape=[256, 256], initializer=tf.contrib.layers.xavier_initializer())\n",
    "W3= tf.get_variable(\"W3\", shape=[256, 128], initializer=tf.contrib.layers.xavier_initializer())\n",
    "W4= tf.get_variable(\"W4\", shape=[128, 128], initializer=tf.contrib.layers.xavier_initializer())\n",
    "W5= tf.get_variable(\"W5\", shape=[128, 10], initializer=tf.contrib.layers.xavier_initializer())\n",
    "\n",
    "B1 = tf.Variable(tf.random_normal([256]))\n",
    "B2 = tf.Variable(tf.random_normal([256]))\n",
    "B3 = tf.Variable(tf.random_normal([128]))\n",
    "B4 = tf.Variable(tf.random_normal([128]))\n",
    "B5 = tf.Variable(tf.random_normal([10]))\n",
    "\n",
    "tf.histogram_summary(\"weights_1\", W1)\n",
    "tf.histogram_summary(\"weights_2\", W2)\n",
    "tf.histogram_summary(\"weights_3\", W3)\n",
    "tf.histogram_summary(\"weights_4\", W4)\n",
    "tf.histogram_summary(\"weights_5\", W5)\n",
    "\n",
    "tf.histogram_summary(\"biases_1\", B1)\n",
    "tf.histogram_summary(\"biases_2\", B2)\n",
    "tf.histogram_summary(\"biases_3\", B3)\n",
    "tf.histogram_summary(\"biases_4\", B4)\n",
    "tf.histogram_summary(\"biases_5\", B5)\n",
    "\n",
    "tf.histogram_summary(\"y\", y)\n",
    "\n",
    "dropout_rate = tf.placeholder(\"float\")\n",
    "\n",
    "with tf.name_scope(\"layer-1\") as scope:\n",
    "    _L1 = tf.nn.relu(tf.add(tf.matmul(x, W1), B1))\n",
    "    L1 = tf.nn.dropout(_L1, dropout_rate)\n",
    "\n",
    "with tf.name_scope(\"layer-2\") as scope:\n",
    "    _L2 = tf.nn.relu(tf.add(tf.matmul(L1, W2), B2))\n",
    "    L2 = tf.nn.dropout(_L2, dropout_rate)\n",
    "\n",
    "with tf.name_scope(\"layer-3\") as scope:\n",
    "    _L3 = tf.nn.relu(tf.add(tf.matmul(L2, W3), B3))\n",
    "    L3 = tf.nn.dropout(_L3, dropout_rate)\n",
    "\n",
    "with tf.name_scope(\"layer-4\") as scope:\n",
    "    _L4 = tf.nn.relu(tf.add(tf.matmul(L3, W4), B4))\n",
    "    L4 = tf.nn.dropout(_L4, dropout_rate)\n",
    "\n",
    "with tf.name_scope(\"layer-5\") as scope:\n",
    "    hypothesis = tf.add(tf.matmul(L4, W5), B5)\n",
    "\n",
    "with tf.name_scope(\"cost\") as scope:\n",
    "    cost = tf.reduce_mean(tf.nn.softmax_cross_entropy_with_logits(hypothesis, y))\n",
    "    cost_summ = tf.scalar_summary(\"cost\", cost)\n",
    "\n",
    "with tf.name_scope(\"train\") as scope:\n",
    "    optimizer = tf.train.AdamOptimizer(learning_rate=learning_rate).minimize(cost)\n",
    "\n",
    "init = tf.initialize_all_variables()\n",
    "step = 0\n",
    "\n",
    "with tf.Session() as sess:\n",
    "    sess.run(init)\n",
    "\n",
    "    merged = tf.merge_all_summaries()\n",
    "    writer = tf.train.SummaryWriter(\"./logs/mnist_logs\", sess.graph_def)\n",
    "\n",
    "    costs = []\n",
    "    for epoch in range(training_epochs):\n",
    "        avg_cost = 0.\n",
    "        total_batch = int(mnist.train.num_examples/batch_size)\n",
    "\n",
    "        for i in range(total_batch):\n",
    "            batch_xs, batch_ys = mnist.train.next_batch(batch_size)\n",
    "#             tmp, _cost, summary = sess.run([optimizer, cost, merged], feed_dict={x: batch_xs, y:batch_ys, dropout_rate:0.7})\n",
    "#            avg_cost += _cost\n",
    "\n",
    "            sess.run(optimizer, feed_dict={x: batch_xs, y:batch_ys, dropout_rate:0.7})\n",
    "            _cost, summary = sess.run([cost, merged], feed_dict={x:batch_xs, y:batch_ys, dropout_rate:1})\n",
    "            avg_cost += _cost/total_batch\n",
    "\n",
    "            step += 1\n",
    "            if step % 100 == 0:\n",
    "#                 summary = sess.run(merged, feed_dict={x:batch_xs, y:batch_ys, dropout_rate:0.7})\n",
    "                writer.add_summary(summary, step)\n",
    "\n",
    "\n",
    "        costs.append(avg_cost)\n",
    "        if epoch % display_step == 0:\n",
    "            print(\"Epoch: \", '%04d' % (epoch+1), \"cost= \", \"{:.9f}\".format(avg_cost))\n",
    "\n",
    "\n",
    "    print(\"Optimization Finished !\")\n",
    "\n",
    "    # Test model\n",
    "    correct_prediction = tf.equal(tf.argmax(hypothesis, 1), tf.argmax(y, 1))\n",
    "\n",
    "    #Calculate accuracy\n",
    "    accuracy = tf.reduce_mean(tf.cast(correct_prediction, \"float\"))\n",
    "    print(\"Accuracy:\", accuracy.eval({x: mnist.test.images, y: mnist.test.labels, dropout_rate: 1}))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 2",
   "language": "python",
   "name": "python2"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 2
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython2",
   "version": "2.7.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 0
}
